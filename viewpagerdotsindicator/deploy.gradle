apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

ext {
  groupId = 'com.tbuonomo.andrui' // package name of the project
  artifactId = "viewpagerdotsindicator" // module name of the library
  libVersion = "2.1.2"
}
version = libVersion
group = groupId

def propsFile = rootProject.file('viewpagerdotsindicator/keystore.properties')

bintray {
  if (propsFile.exists()) {
    def props = new Properties()
    props.load(new FileInputStream(propsFile))
    key = props.getProperty("bintrayKey")
    user = props.getProperty("bintrayUser")
  }
  configurations = ['archives']
  publish = true //[Default: false] Whether version should be auto published after an upload
  override = false //[Default: false] Whether to override version artifacts already published
  // Package configuration. The plugin will use the repo and name properties to check if the
  // package already exists. In that case, there's no need to configure the other package
  // properties (like userOrg, desc, etc).
  pkg {
    repo = "maven" //bintray repo
    name = "dots-indicator" //bintray package
    version {
      name = libVersion
    }
    licenses = ['Apache-2.0']
    vcsUrl = 'https://github.com/tommybuonomo/dotsindicator'
    websiteUrl = 'https://github.com/tommybuonomo/dotsindicator'
  }
}
install {
  repositories.mavenInstaller {
    pom.project {
      packaging 'aar'
      groupId groupId
      artifactId artifactId
      version libVersion
      name artifactId
    }
  }
}

if (project.hasProperty("kotlin")) {
  //Kotlin libraries
  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
  }

  task javadoc(type: Javadoc, dependsOn: dokka) {}
} else if (project.hasProperty("android")) {
  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
  }

  task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  }
} else {
  // Java libraries
  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
  // options.encoding = 'UTF-8'
}

artifacts {
  archives javadocJar
  archives sourcesJar
}